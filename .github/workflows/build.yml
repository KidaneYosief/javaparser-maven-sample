# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: sarxxx-build-webapp

on:
  workflow_dispatch: ~
  push:   frefdwq a

jobs:
  build:
    runs-on: App-Factory-Win-2019
      
    steps:
        
      - name: Get the Source Code 
        uses: actions/checkout@v3
        with:
          ref: "${{github.ref_name}}"
      
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'    
          java-version: '17'
            
      # setup-msbuild finds the "correct" version of msbuild
      # and puts it in the path
      # ------
      # NOTE: The path to the action is vendor-actions/setup-msbuild
      # NOT microsoft/setup-msbuild. This is because the action
      # is being hosted on the XetaDev github
      - name: Setup XetaDev MS Build
        uses: vendor-actions/setup-msbuild@v1.1
        with:
          vs-version: '[17.0,18)'
          vswhere-path: 'c:\apps\'
        
      - name: Restore NuGet packages from Artifactory
        run: |
          Get-ChildItem Env:
          nuget sources Add -Name ArtifactoryV2 -Source $env:JFROG_URL/api/nuget/$env:NUGET_REPO -username $env:JF_USER -password $env:JF_USER_TOKEN
          nuget setapikey "$env:JF_USER:$env:JF_USER_TOKEN" -Source ArtifactoryV2
          #nuget restore   # don't need artifactory for nuget pkgs...build will restore from packages folder in solution
          
       # Build for API
      - name: Build API
        run: |
          msbuild .\$env:PATH_TO_CSPROJ_API /nologo /verbosity:m /t:clean /t:BUILD /t:pipelinePreDeployCopyAllFilesToOneFolder /p:Configuration=$env:PUBLISH_PROFILE /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true 
       
       # Build for UI
      - name: Build UI
        run: |
          msbuild .\$env:PATH_TO_CSPROJ_UI /nologo /verbosity:m /t:clean /t:BUILD /t:pipelinePreDeployCopyAllFilesToOneFolder /p:Configuration=$env:PUBLISH_PROFILE /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true 

       # Build for Ldap2SQLTable
      - name: Build Ldap2SQLTable          
        run: |
          msbuild .\$env:PATH_TO_CSPROJ_LDAP2SQL /nologo /verbosity:m /t:clean /t:BUILD /t:pipelinePreDeployCopyAllFilesToOneFolder /p:Configuration=$env:PUBLISH_PROFILE /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true 
          move-item -Path $env:PATH_FOR_FILES_TO_ZIP_LDAP2SQL_ORG -Destination $env:PATH_FOR_FILES_TO_ZIP_LDAP2SQL -Force
          ls $env:PATH_FOR_FILES_TO_ZIP_LDAP2SQL
       
       # Build for BackgrounManual
      - name: Build BackgrounManual          
        run: |
          msbuild .\$env:PATH_TO_CSPROJ_BACK_MANUAL /nologo /verbosity:m /t:clean /t:BUILD /t:pipelinePreDeployCopyAllFilesToOneFolder /p:Configuration=$env:PUBLISH_PROFILE /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true 
          move-item -Path $env:PATH_FOR_FILES_TO_ZIP_BACK_MANUAL_ORG -Destination $env:PATH_FOR_FILES_TO_ZIP_BACK_MANUAL -Force
          ls $env:PATH_FOR_FILES_TO_ZIP_BACK_MANUAL

       # Build for BackgrounNightly
      - name: Build BackgrounNightly          
        run: |
          msbuild .\$env:PATH_TO_CSPROJ_BACK_NIGHTLY /nologo /verbosity:m /t:clean /t:BUILD /t:pipelinePreDeployCopyAllFilesToOneFolder /p:Configuration=$env:PUBLISH_PROFILE /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true 
          move-item -Path $env:PATH_FOR_FILES_TO_ZIP_BACK_NIGHTLY_ORG -Destination $env:PATH_FOR_FILES_TO_ZIP_BACK_NIGHTLY -Force
          ls $env:PATH_FOR_FILES_TO_ZIP_BACK_NIGHTLY

       # Build for BackgrounPeriodic
      - name: Build BackgrounPeriodic          
        run: |
          msbuild .\$env:PATH_TO_CSPROJ_BACK_PERIODIC /nologo /verbosity:m /t:clean /t:BUILD /t:pipelinePreDeployCopyAllFilesToOneFolder /p:Configuration=$env:PUBLISH_PROFILE /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=false /p:SkipInvalidConfigurations=true 
          move-item -Path $env:PATH_FOR_FILES_TO_ZIP_BACK_PERIODIC_ORG -Destination $env:PATH_FOR_FILES_TO_ZIP_BACK_PERIODIC -Force
          ls $env:PATH_FOR_FILES_TO_ZIP_BACK_PERIODIC
        
      - name: Run NUnit Tests
        run: |
          dotnet nuget list source
          ls C:\apps\actions-runner\_work\SAR-webapp\SAR-webapp\packages
          dotnet restore $env:UNIT_TEST_PATH --verbosity d
          msbuild $env:UNIT_TEST_PATH
          dotnet test $env:UNIT_TEST_DLL_PATH

      - name: Coverity security scan 
        if: ${{github.ref_name == 'master' && github.event.inputs.publish != 'true'}}
        run: |
          .\.github\build\coverity.ps1 $env:PATH_TO_CSPROJ_UI false
          .\.github\build\coverity.ps1 $env:PATH_TO_CSPROJ_API false
          .\.github\build\coverity.ps1 $env:PATH_TO_CSPROJ_LDAP2SQL false
          .\.github\build\coverity.ps1 $env:PATH_TO_CSPROJ_BACK_MANUAL false
          .\.github\build\coverity.ps1 $env:PATH_TO_CSPROJ_BACK_NIGHTLY false
          .\.github\build\coverity.ps1 $env:PATH_TO_CSPROJ_BACK_PERIODIC true

      - name: BlackDuck security scan 
        if: ${{github.ref_name == 'master' && github.event.inputs.publish != 'true'}}
        run: |
          echo $env:PATH
          detect8.bat

      - name: Publish WEBAPP Package
        if: ${{github.ref_name == 'master' || github.event.inputs.publish == 'true'}} 
        shell: powershell
        run: |
          .\.github\build\build-publish.ps1

      - name: Get Token
        if: ${{github.ref_name == 'master'}}
        id: get_workflow_token
        uses: vendor-actions/workflow-application-token-action@v2
        with:
          application_id: ${{ env.APP_FACTORY_GITHUB_APP_ID }}
          application_private_key: ${{ env.APP_FACTORY_GITHUB_APP_PRIVATE_KEY }}

      - name: create GitHub Release (for master branch only)
        if: ${{github.ref_name == 'master'}}
        env:
          GITHUB_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
        run: | 
          gh api --method POST -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" `
                -H "Accept:application/vnd.github+json" `
                -H "X-GitHub-Api-Version:2022-11-28" `
                $env:GIT_RELEASE_URL `
                -f tag_name="$env:RELEASE_VERSION" `
                -f target_commitish='master' `
                -f name="$env:RELEASE_VERSION" `
                -f body='Description of the release' `
                -F draft=false `
                -F prerelease=false `
                -F generate_release_notes=false

      - name: CleanUp workspace
        if: always()
        shell: powershell
        run: |
          write-output "list content before removing"
          ls
          Remove-Item * -Force -Recurse -ErrorAction SilentlyContinue
          write-output "list content after removing"
          ls
